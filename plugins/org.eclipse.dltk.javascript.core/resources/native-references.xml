<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ref="http://www.eclipse.org/dltk/javascript/typeinfo.ecore">
  <ref:Type name="Error" kind="PREDEFINED" superType="Object">
  	<members xsi:type="ref:Property" name="name" directType="String" description="Error name."/>
  	<members xsi:type="ref:Property" name="message" directType="String" description="Error message."/>
  	<members xsi:type="ref:Property" name="stack" directType="String" description="The stacktrace."/>
    <staticConstructor name="Error" directType="Error">
      <parameters name="message" kind="OPTIONAL" directType="Object"/>
    </staticConstructor>
  </ref:Type>
  <ref:Type name="EvalError" kind="PREDEFINED" superType="Error">
  </ref:Type>
  <ref:Type name="RangeError" kind="PREDEFINED" superType="Error">
  </ref:Type>
  <ref:Type name="ReferenceError" kind="PREDEFINED" superType="Error">
  </ref:Type>
  <ref:Type name="SyntaxError" kind="PREDEFINED" superType="Error">
    <staticConstructor name="SyntaxError" directType="SyntaxError">
      <parameters name="message" kind="OPTIONAL" directType="Object"/>
    </staticConstructor>
  </ref:Type>
  <ref:Type name="TypeError" kind="PREDEFINED" superType="Error">
  </ref:Type>
  <ref:Type name="URIError" kind="PREDEFINED" superType="Error">
  </ref:Type>
  <ref:TypeAlias source="function" target="Function"/>
  <ref:Type name="Function" kind="PREDEFINED" superType="Object">
  	<members xsi:type="ref:Property" name="prototype" directType="Object" static="false" description="Allows the addition of properties to the instance of the object created by the constructor function."/>
  	<members xsi:type="ref:Property" name="length" directType="Number"  description="Specifies the number of arguments expected by the function."/>
  	<members xsi:type="ref:Method" name="apply" directType="Object" description="Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object." >
    	<parameters name="thisArg"/>
    	<parameters name="argsArray" directType="Array" kind="OPTIONAL"/>
    </members>
  	<members xsi:type="ref:Method" name="call" directType="Object" description="Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are." >
    	<parameters name="thisArg"/>
    	<parameters name="arg" kind="VARARGS"/>
    </members>
  	<members xsi:type="ref:Method" name="bind" directType="Function" description="Creates a new function that, when called, itself calls this function in the context of the provided this value, with a given sequence of arguments preceding any provided when the new function was called.">
    	<parameters name="thisArg" directType="Object"/>
    	<parameters name="arg" kind="VARARGS"/>
    </members>
  </ref:Type>
  <ref:TypeAlias source="object" target="Object"/>
  <ref:Type name="Object" kind="PREDEFINED">
  	<members xsi:type="ref:Property" name="constructor" directType="Object" description="Returns a reference to the Object function that created the instance's prototype."/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a string representing the specified object."/>
    <members xsi:type="ref:Method" name="toLocaleString" description="Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes."/>
    <members xsi:type="ref:Method" name="valueOf" directType="Object" description="Returns the primitive value of the specified object."/>
    <members xsi:type="ref:Method" name="hasOwnProperty" directType="Boolean" description="Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.">
    	<parameters name="prop" directType="String"/>
    </members>
    <members xsi:type="ref:Method" name="isPrototypeOf" description="Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.">
    	<parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="getPrototypeOf" directType="Object" description="Returns the prototype of the specified object." static="true">
    	<parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="getOwnPropertyDescriptor" directType="Object" description="Returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object." static="true">
    	<parameters name="object" directType="Object"/>
    	<parameters name="prop" directType="String"/>
    </members>
    <members xsi:type="ref:Method" name="getOwnPropertyNames" directType="Object" description="Returns an array of all properties (enumerable or not) found upon a given object." static="true">
    	<parameters name="object" directType="Object"/>
		<type xsi:type="ref:ArrayType">
			<itemType xsi:type="ref:SimpleType" target="String"/>
		</type>
    </members>
    <members xsi:type="ref:Method" name="create" directType="Object" description="Creates a new object with the specified prototype object and properties." static="true">
    	<parameters name="object" directType="Object"/>
    	<parameters name="properties" directType="Object" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="defineProperty" directType="Object" description="Defines a new property directly on an object, or modifies an existing property on an object, and returns the object." static="true">
    	<parameters name="object" directType="Object"/>
    	<parameters name="prop" directType="String"/>
    	<parameters name="descriptor" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="defineProperties" directType="Object" description="Defines new or modifies existing properties directly on an object, returning the object." static="true">
    	<parameters name="object" directType="Object"/>
    	<parameters name="properties" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="seal" description="Seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable." static="true">
    	<parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="freeze" directType="Object" description="Freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen." static="true">
    	<parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="preventExtensions" directType="Object" description="Prevents new properties from ever being added to an object (i.e. prevents future extensions to the object)." static="true">
    	<parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="isSealed" directType="Boolean" description="Determine if an object is sealed." static="true">
    	<parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="isFrozen" directType="Boolean" description="Determine if an object is frozen." static="true">
    	<parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="isExtensible" directType="Boolean" description="Determines if an object is extensible (whether it can have new properties added to it)." static="true">
    	<parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="keys" description="Returns an array of all own enumerable properties found upon a given object, in the same order as that provided by a for-in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)." static="true">
    	<parameters name="object" directType="Object"/>
		<type xsi:type="ref:ArrayType">
			<itemType xsi:type="ref:SimpleType" target="String"/><!-- String or Number -->
		</type>
    </members>
    <members xsi:type="ref:Method" name="propertyIsEnumerable" description="Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.">
    	<parameters name="prop" directType="String"/>
    </members>
    <members xsi:type="ref:Method" name="assign" directType="Object" description="Copy the values of all enumerable own properties from one or more source objects to a target object." static="true">
    	<parameters name="target" directType="Object"/>
    	<parameters name="sources" directType="Object" kind="VARARGS"/>
    </members>
    <members xsi:type="ref:Method" name="is" directType="Boolean" description="Determines whether two values are the same value." static="true">
    	<parameters name="value1" directType="Object"/>
    	<parameters name="value2" directType="Object"/>
    </members>
  </ref:Type>
  <ref:TypeAlias source="regexp" target="RegExp"/>
  <ref:Type name="RegExp" kind="PREDEFINED" superType="Object">
    <members xsi:type="ref:Property" name="global" directType="Boolean" description="Whether to test the regular expression against all possible matches in a string, or only against the first." />
    <members xsi:type="ref:Property" name="ignoreCase" directType="Boolean" description="Whether to ignore case while attempting a match in a string." />
    <members xsi:type="ref:Property" name="lastIndex" directType="Number" description="The index at which to start the next match." />
    <members xsi:type="ref:Property" name="multiline" directType="Boolean" description="Whether or not to search in strings across multiple lines." />
    <members xsi:type="ref:Property" name="source" directType="String" description="The text of the pattern." />
	<members xsi:type="ref:Method" name="exec" directType="Array" description="Executes a search for a match in its string parameter." >
    	<parameters name="str" directType="String"/>
    </members>
	<members xsi:type="ref:Method" name="test" directType="Boolean" description="Tests for a match in its string parameter." >
    	<parameters name="str" directType="String"/>
    </members>
  </ref:Type>
  <ref:Type name="Math" kind="PREDEFINED" instantiable="false">
    <members xsi:type="ref:Property" name="E" directType="Number" description="Euler's constant and the base of natural logarithms, approximately 2.718." static="true"/>
    <members xsi:type="ref:Property" name="LN2" directType="Number" description="Natural logarithm of 2, approximately 0.693." static="true"/>
    <members xsi:type="ref:Property" name="LN10" directType="Number" description="Natural logarithm of 10, approximately 2.302." static="true"/>
    <members xsi:type="ref:Property" name="LOG2E" directType="Number" description="Base 2 logarithm of E, approximately 1.442." static="true"/>
    <members xsi:type="ref:Property" name="LOG10E" directType="Number" description="Base 10 logarithm of E, approximately 0.434." static="true"/>
    <members xsi:type="ref:Property" name="PI" directType="Number" description="Ratio of the circumference of a circle to its diameter, approximately 3.14159." static="true"/>
    <members xsi:type="ref:Property" name="SQRT1_2" directType="Number" description="Square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707." static="true"/>
    <members xsi:type="ref:Property" name="SQRT2" directType="Number" description="Square root of 2, approximately 1.414." static="true"/>
    <members xsi:type="ref:Method" name="abs" directType="Number" description="Returns the absolute value of a number." static="true">
    	<parameters name="x"/>
    </members>
    <members xsi:type="ref:Method" name="acos" directType="Number" description="Returns the arccosine of a number." static="true">
    	<parameters name="x" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="asin" directType="Number" description="Returns the arcsine of a number." static="true">
    	<parameters name="x" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="atan" directType="Number" description="Returns the arctangent of a number." static="true">
    	<parameters name="x" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="atan2" directType="Number" description="Returns the arctangent of the quotient of its arguments." static="true">
    	<parameters name="y" directType="Number"/>
    	<parameters name="x" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="ceil" directType="Number" description="Returns the smallest integer greater than or equal to a number." static="true">
    	<parameters name="x"/>
    </members>
    <members xsi:type="ref:Method" name="cos" directType="Number" description="Returns the arctangent of the quotient of its arguments." static="true">
    	<parameters name="x"/>
    </members>
    <members xsi:type="ref:Method" name="exp" directType="Number" description="Returns Enumber, where number is the argument, and E is Euler's constant (2.718...), the base of the natural logarithm." static="true">
    	<parameters name="x"/>
    </members>
    <members xsi:type="ref:Method" name="floor" directType="Number" description="Returns the largest integer less than or equal to a number." static="true">
    	<parameters name="x"/>
    </members>
    <members xsi:type="ref:Method" name="log" directType="Number" description="Returns the natural logarithm (loge, also ln) of a number." static="true">
    	<parameters name="x"/>
    </members>
    <members xsi:type="ref:Method" name="max" directType="Number" description="Returns the largest of zero or more numbers." static="true">
    	<parameters name="value" kind="VARARGS" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="min" directType="Number" description="Returns the smallest of zero or more numbers." static="true">
    	<parameters name="value" kind="VARARGS" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="pow" directType="Number" description="Returns base to the exponent power, that is, baseexponent." static="true">
    	<parameters name="base" directType="Number"/>
    	<parameters name="exponent" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="random" directType="Number" description="Returns a pseudo-random number between 0 and 1." static="true">
    </members>
    <members xsi:type="ref:Method" name="round" directType="Number" description="Returns the value of a number rounded to the nearest integer." static="true">
    	<parameters name="x" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="sin" directType="Number" description="Returns the sine of a number." static="true">
    	<parameters name="x" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="sqrt" directType="Number" description="Returns the positive square root of a number." static="true">
    	<parameters name="x" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="tan" directType="Number" description="Returns the tangent of a number." static="true">
    	<parameters name="x" directType="Number"/>
    </members>
  </ref:Type>
  <ref:GenericType name="Array" kind="PREDEFINED" superType="Object" description="Arrays are list-like objects that come with a several built-in methods to perform traversal and mutation operations.">
  	<typeParameters name="E"/>
    <staticConstructor name="Array" directType="Array">
      <parameters name="item" kind="VARARGS" directType="Object"/>
    </staticConstructor>
    <members xsi:type="ref:Method" name="isArray" directType="Boolean" description="Returns true if an object is an array, false if it is not." static="true">
      <parameters name="object" directType="Object"/>
    </members>
    <members xsi:type="ref:Method" name="concat" description="Joins two or more arrays and returns the result.">
      <parameters name="array" kind="VARARGS"/>
      <type xsi:type="ref:ArrayType">
        <itemType xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </type>
    </members>
    <members xsi:type="ref:Method" name="every" directType="Boolean" description="Tests whether all elements in the array pass the test implemented by the provided function. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray).">
      <parameters name="callback" directType="Function"/>
    </members>
    <members xsi:type="ref:Method" name="filter" description="Creates a new array with all elements that pass the test implemented by the provided function. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray).">
      <parameters name="callback" directType="Function"/>
      <type xsi:type="ref:ArrayType">
        <itemType xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </type>
    </members>
    <members xsi:type="ref:Method" name="forEach" description="Calls a function for each element in the array. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray). Optionally with a thisObject argument to use as this when executing callback.">
      <parameters name="callback" directType="Function"/>
      <parameters name="thisArg" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="indexOf" directType="Number" description="Returns the first index at which a given element can be found in the array, or -1 if it is not present.">
      <parameters name="searchElement"/>
      <parameters name="fromIndex" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="join" directType="String" description="Puts all the elements of an array into a string. The elements are separated by a specified delimiter.">
      <parameters name="separator" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="lastIndexOf" directType="Number" description="Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.">
      <parameters name="searchElement"/>
      <parameters name="formIndex" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Property" name="length" directType="Number" description="The length returns an integer representing the length of an array."/>
    <members xsi:type="ref:Method" name="map" directType="Array" description="Creates a new array with the results of calling a provided function on every element in this array. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray). Optionally with a thisObject argument to use as this when executing callback.">
      <parameters name="callback" directType="Function"/>
      <parameters name="thisArg" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="pop" description="Removes and returns the last element of an array.">
    	<type xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
    </members>
    <members xsi:type="ref:Method" name="push" directType="Number" description="Adds one or more elements to the end of an array and returns the new length">
      <parameters name="element" kind="VARARGS">
    	<type xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </parameters>
    </members>
    <members xsi:type="ref:Method" name="reverse" description="Reverses the order of the elements in an array.">
     <type xsi:type="ref:ArrayType">
        <itemType xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </type>
    </members>
    <members xsi:type="ref:Method" name="shift" description="Removes and returns the first element of an array.">
    	<type xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
    </members>
    <members xsi:type="ref:Method" name="slice" description="Returns selected elements from an existing array.">
      <parameters name="start" directType="Number"/>
      <parameters name="end" directType="Number" kind="OPTIONAL"/>
      <type xsi:type="ref:ArrayType">
        <itemType xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </type>
    </members>
    <members xsi:type="ref:Method" name="reduce" description="Reduces the array to a single value by executing a provided function for each value of the array (from left-to-right).">
      <parameters name="function(total, currentValue, [index] , [arr])" directType="Function"/>
      <parameters name="initialValue" kind="OPTIONAL">
         <type xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </parameters>
      <type xsi:type="ref:ArrayType">
        <itemType xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </type>
    </members>
    <members xsi:type="ref:Method" name="some" directType="Boolean" description="Tests whether some element in the array passes the test implemented by the provided function. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray). Optionally with a thisObject argument to use as this when executing callback.">
      <parameters name="callback" directType="Function"/>
      <parameters name="thisArg" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="sort" description="Sorts the elements of an array. The function will be called with 2 arguments (a,b)">
      <parameters name="sortByFunction" directType="Function" kind="OPTIONAL"/>
      <type xsi:type="ref:ArrayType">
        <itemType xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </type>
    </members>
    <members xsi:type="ref:Method" name="splice" description="Removes and adds new elements to an array. Returns the removed elements as an Array">
      <parameters name="index" directType="Number"/>
      <parameters name="howmany" directType="Number"/>
      <parameters name="element" kind="VARARGS"/>
      <type xsi:type="ref:ArrayType">
        <itemType xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </type>
    </members>
    <members xsi:type="ref:Method" name="toLocaleString" directType="String"/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a String value for Array."/>
    <members xsi:type="ref:Method" name="unshift" directType="Number" description="Adds one or more elements to the beginning of an array and returns the new length.">
      <parameters name="element" kind="VARARGS">
    	<type xsi:type="ref:TypeVariableReference" variable="@ROOT/Array/E"/>
      </parameters>
    </members>
  </ref:GenericType>
  <ref:Type name="Boolean" kind="PREDEFINED" superType="Object">
    <staticConstructor name="Boolean" directType="Boolean">
      <parameters name="value" kind="OPTIONAL" directType="Object"/>
    </staticConstructor>
  </ref:Type>
  <ref:TypeAlias source="boolean" target="Boolean"/>
  <ref:Type name="Date" kind="PREDEFINED" description="Creates Date instances which let you work with dates and times." superType="Object">
  	<staticConstructor name="Date" directType="String"/>
  	<constructors name="Date"/>
  	<constructors name="Date">
      <parameters name="milliseconds" directType="Number"/>
  	</constructors>
  	<constructors name="Date">
      <parameters name="date" directType="Date"/>
  	</constructors>
  	<constructors name="Date">
      <parameters name="dateString" directType="String"/>
  	</constructors>
  	<constructors name="Date">
      <parameters name="year" directType="Number"/>
      <parameters name="month" directType="Number"/>
      <parameters name="day" directType="Number" kind="OPTIONAL"/>
      <parameters name="hour" directType="Number" kind="OPTIONAL"/>
      <parameters name="minute" directType="Number" kind="OPTIONAL"/>
      <parameters name="second" directType="Number" kind="OPTIONAL"/>
      <parameters name="millisecond" directType="Number" kind="OPTIONAL"/>
  	</constructors>
    <members xsi:type="ref:Method" name="parse" directType="Number" description="Parses a string representation of a date, and returns the number of milliseconds since midnight Jan 1, 1970" static="true">
      <parameters name="dateString" directType="String"/>
    </members>
    <members xsi:type="ref:Method" name="now" directType="Number" description="Returns the numeric value corresponding to the current time." static="true"/>
    <members xsi:type="ref:Method" name="UTC" directType="Number" description="UTC takes comma-delimited date parameters and returns the number of milliseconds between January 1, 1970, 00:00:00, universal time and the time you specified." static="true">
      <parameters name="year" directType="Number"/>
      <parameters name="month" directType="Number"/>
      <parameters name="date" directType="Number" kind="OPTIONAL"/>
      <parameters name="hrs" directType="Number" kind="OPTIONAL"/>
      <parameters name="min" directType="Number" kind="OPTIONAL"/>
      <parameters name="sec" directType="Number" kind="OPTIONAL"/>
      <parameters name="ms" directType="Number" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="getDate" directType="Number" description="Returns the day of the month from a Date object (from 1-31)."/>
    <members xsi:type="ref:Method" name="getDay" directType="Number" description="Returns the day of the week from a Date object (from 0-6)."/>
    <members xsi:type="ref:Method" name="getFullYear" directType="Number" description="Returns the year, as a four-digit number."/>
    <members xsi:type="ref:Method" name="getHours" directType="Number" description="Returns the hour of a day (from 0-23)."/>
    <members xsi:type="ref:Method" name="getMilliseconds" directType="Number" description="Returns the milliseconds of a Date object (from 0-999)."/>
    <members xsi:type="ref:Method" name="getMinutes" directType="Number" description="Returns the minutes of a date (from 0-59)"/>
    <members xsi:type="ref:Method" name="getMonth" directType="Number" description="Returns the month from a date (from 0-11)."/>
    <members xsi:type="ref:Method" name="getSeconds" directType="Number" description="Returns the seconds of a date (from 0-59)"/>
    <members xsi:type="ref:Method" name="getTime" directType="Number" description="Returns the number of milliseconds since midnight Jan 1, 1970"/>
    <members xsi:type="ref:Method" name="valueOf" directType="Number" description="Returns the primitive value of a Date object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC. This method is functionally equivalent to the getTime method."/>
    <members xsi:type="ref:Method" name="getTimezoneOffset" directType="Number" description="Returns the difference in minutes between local time and Greenwich Mean Time (GMT)."/>
    <members xsi:type="ref:Method" name="getUTCDate" directType="Number" description="Returns the day of the month from a date according to universal time (from 1-31)."/>
    <members xsi:type="ref:Method" name="getUTCDay" directType="Number" description="Returns the day of the week from a date according to universal time (from 0-6)"/>
    <members xsi:type="ref:Method" name="getUTCFullYear" directType="Number" description="Returns the four-digit year from a date according to universal time "/>
    <members xsi:type="ref:Method" name="getUTCHours" directType="Number" description="Returns the hour of a date according to universal time (from 0-23)"/>
    <members xsi:type="ref:Method" name="getUTCMilliseconds" directType="Number" description="Returns the milliseconds of a date according to universal time (from 0-999)"/>
    <members xsi:type="ref:Method" name="getUTCMinutes" directType="Number" description="Returns the minutes of a date according to universal time (from 0-59)"/>
    <members xsi:type="ref:Method" name="getUTCMonth" directType="Number" description="Returns the month from a Date object according to universal time (from 0-11)"/>
    <members xsi:type="ref:Method" name="getUTCSeconds" directType="Number" description="Returns the seconds of a date according to universal time (from 0-59)"/>
    <members xsi:type="ref:Method" name="getYear" directType="Number" deprecated="true" description="Returns the year, as a two-digit or a three/four-digit number, depending on the browser. Use getFullYear() instead!!"/>
    <members xsi:type="ref:Method" name="setDate" directType="Number" description="Sets the day of the month from a Date object (from 1-31).">
      <parameters name="day"/>
    </members>
    <members xsi:type="ref:Method" name="setFullYear" directType="Number" description="Sets the year, as a four-digit number.">
      <parameters name="fullyear"/>
      <parameters name="month" kind="OPTIONAL"/>
      <parameters name="day" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setHours" directType="Number" description="Sets the hour of a day (from 0-23).">
      <parameters name="hours"/>
      <parameters name="minutes" kind="OPTIONAL"/>
      <parameters name="seconds" kind="OPTIONAL"/>
      <parameters name="millis" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setMilliseconds" directType="Number" description="Sets the milliseconds of a Date object (from 0-999).">
      <parameters name="millis"/>
    </members>
    <members xsi:type="ref:Method" name="setMinutes" directType="Number" description="Sets the minutes of a date (from 0-59)">
      <parameters name="minutes"/>
      <parameters name="seconds" kind="OPTIONAL"/>
      <parameters name="millis" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setMonth" directType="Number" description="Sets the month from a date (from 0-11).">
      <parameters name="month"/>
      <parameters name="day" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setSeconds" directType="Number" description="Sets the seconds of a date (from 0-59)">
      <parameters name="seconds"/>
      <parameters name="millis" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setTime" directType="Number" description="Sets the number of milliseconds since midnight Jan 1, 1970">
      <parameters name="millis"/>
    </members>
    <members xsi:type="ref:Method" name="setUTCDate" directType="Number" description="Sets the day of the month from a date according to universal time (from 0-6).">
      <parameters name="day"/>
    </members>
    <members xsi:type="ref:Method" name="setUTCFullYear" directType="Number" description="Sets the four-digit year from a date according to universal time ">
      <parameters name="fullyear"/>
      <parameters name="month" kind="OPTIONAL"/>
      <parameters name="day" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setUTCHours" directType="Number" description="Sets the hour of a date according to universal time (from 0-23)">
      <parameters name="hours"/>
      <parameters name="minutes" kind="OPTIONAL"/>
      <parameters name="seconds" kind="OPTIONAL"/>
      <parameters name="millis" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setUTCMilliseconds" directType="Number" description="Sets the milliseconds of a date according to universal time (from 0-999)">
      <parameters name="millis"/>
    </members>
    <members xsi:type="ref:Method" name="setUTCMinutes" directType="Number" description="Sets the minutes of a date according to universal time (from 0-59)">
      <parameters name="minutes"/>
      <parameters name="seconds" kind="OPTIONAL"/>
      <parameters name="millis" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setUTCMonth" directType="Number" description="Sets the month from a Date object according to universal time (from 0-11)">
      <parameters name="month"/>
      <parameters name="day" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setUTCSeconds" directType="Number" description="Sets the seconds of a date according to universal time (from 0-59)">
      <parameters name="seconds"/>
      <parameters name="millis" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setYear" directType="Number" deprecated="true" description="Sets the year, as a two-digit or a three/four-digit number, depending on the browser. Use setFullYear() instead!!">
      <parameters name="year"/>
    </members>
    <members xsi:type="ref:Method" name="toDateString" directType="String" description="Returns the date portion of a Date object in readable form"/>
    <members xsi:type="ref:Method" name="toLocaleDateString" directType="String" description="Converts a Date object, according to local time, to a string and returns the date portion."/>
    <members xsi:type="ref:Method" name="toLocaleString" directType="String" description="Converts a Date object, according to local time, to a string."/>
    <members xsi:type="ref:Method" name="toLocaleTimeString" directType="String" description="Converts a Date object, according to local time, to a string and returns the time portion."/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a String value for this object."/>
    <members xsi:type="ref:Method" name="toTimeString" directType="String" description="Returns the time portion of a Date object in readable form."/>
    <members xsi:type="ref:Method" name="toUTCString" directType="String" description="Converts a Date object, according to universal time, to a string."/>
    <members xsi:type="ref:Method" name="toISOString" directType="String" description="Returns the Date object as a string in simplified extended ISO format."/>
  </ref:Type>
  <ref:Type name="Number" kind="PREDEFINED" superType="Object">
    <staticConstructor name="Number" directType="Number">
      <parameters name="value" kind="OPTIONAL" directType="Object"/>
    </staticConstructor>
  	<members xsi:type="ref:Property" name="MAX_VALUE" directType="Number" static="true" description="The largest representable number."/>
  	<members xsi:type="ref:Property" name="MIN_VALUE" directType="Number" static="true" description="The smallest representable number."/>
  	<members xsi:type="ref:Property" name="NaN" directType="Number" static="true" description="Special 'not a number' value."/>
  	<members xsi:type="ref:Property" name="NEGATIVE_INFINITY" directType="Number" static="true" description="Special value representing negative infinity; returned on overflow."/>
  	<members xsi:type="ref:Property" name="POSITIVE_INFINITY" directType="Number" static="true" description="Special value representing infinity; returned on overflow."/>
    <members xsi:type="ref:Method" name="toExponential" directType="String" description="Converts the value of the object into an exponential notation.">
      <parameters name="numberOfDecimals" directType="Number" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="toFixed" directType="String" description="Formats a number to the specified number of decimals.">
      <parameters name="numberOfDecimals" directType="Number" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="toPrecision" directType="String" description="Converts a number into an exponential notation if it has more digits than specified.">
      <parameters name="numberOfDigits" directType="Number" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="valueOf" directType="Number" description="Returns the primitive value of a Number object."/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a String value for this object.The toString method parses its first argument, and attempts to return a string representation in the specified radix (base)">
      <parameters name="radix" directType="Number" kind="OPTIONAL"/>
    </members>
  </ref:Type>
  <ref:TypeAlias source="number" target="Number"/>
  <ref:Type name="String" kind="PREDEFINED" description="String is a global object that may be used to construct String  instances." superType="Object">
    <constructors name="String">
      <parameters name="thing" kind="OPTIONAL" directType="Object"/>
    </constructors>
    <staticConstructor name="String" directType="String">
      <parameters name="value" kind="OPTIONAL" directType="Object"/>
    </staticConstructor>
  	<members xsi:type="ref:Method" name="fromCharCode" directType="String" static="true" description="Returns a string created by using the specified sequence of Unicode values.">
  	    <parameters name="num" kind="VARARGS"/>
    </members>
    <members xsi:type="ref:Method" name="anchor" directType="String" description="Creates an HTML anchor.">
      <parameters name="anchorname" directType="String"/>
    </members>
    <members xsi:type="ref:Method" name="includes" directType="Boolean" description="Determines whether one string may be found within another string.">
      <parameters name="searchValue" directType="String"/>
    </members>
    <members xsi:type="ref:Method" name="big" directType="String" description="Returns a string in a big font."/>
    <members xsi:type="ref:Method" name="blink" directType="String" description="Returns a blinking string."/>
    <members xsi:type="ref:Method" name="bold" directType="String" description="Returns a string in bold."/>
    <members xsi:type="ref:Method" name="charAt" directType="String" description="Returns the character at a specified position.">
      <parameters name="index" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="charCodeAt" directType="Number" description="Returns the Unicode of the character at a specified position.">
      <parameters name="index" directType="Number"/>
    </members>
    <members xsi:type="ref:Method" name="concat" directType="String" description="Joins two or more strings.">
      <parameters name="strings" directType="String" kind="VARARGS"/>
    </members>
    <members xsi:type="ref:Method" name="equals" directType="Boolean">
      <parameters name="object"/>
    </members>
    <members xsi:type="ref:Method" name="equalsIgnoreCase" directType="Boolean">
      <parameters name="otherString"/>
    </members>
    <members xsi:type="ref:Method" name="fixed" directType="String" description="Returns a string as teletype text."/>
    <members xsi:type="ref:Method" name="fontcolor" directType="String" description="Returns a string in a specified color.">
      <parameters name="color"/>
    </members>
    <members xsi:type="ref:Method" name="fontsize" directType="String" description="Returns a string in a specified size.">
      <parameters name="size"/>
    </members>
    <members xsi:type="ref:Method" name="indexOf" directType="Number" description="Returns the position of the first occurrence of a specified string value in a string.">
      <parameters name="searchValue"/>
      <parameters name="fromIndex" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="italics" directType="String" description="Returns a string in italic."/>
    <members xsi:type="ref:Method" name="lastIndexOf" directType="Number" description="Returns the position of the last occurrence of a specified string value, searching backwards from the specified position in a string.">
      <parameters name="searchValue"/>
      <parameters name="fromIndex" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Property" name="length" directType="Number" description="The length of a string"/>
    <members xsi:type="ref:Method" name="link" directType="String" description="Returns a string as a hyperlink.">
      <parameters name="url"/>
    </members>
        <members xsi:type="ref:Method" name="localeCompare" directType="Number" description="This method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.">
      <parameters name="otherString"/>
    </members>
    <members xsi:type="ref:Method" name="match" description="Searches for a specified value in a string.">
      <parameters name="searchvalue"/>
      <type xsi:type="ref:ArrayType">
			<itemType xsi:type="ref:SimpleType" target="String"/>
	  </type>
    </members>
    <members xsi:type="ref:Method" name="replace" directType="String" description="Replaces some characters with some other characters in a string.">
      <parameters name="findString">
      <type xsi:type="ref:UnionType" >
		<targets xsi:type="ref:SimpleType" >
		<target href="proxy:dltk/javascript/typeinfo/type#String"/>
		</targets>
		<targets xsi:type="ref:SimpleType" >
		<target href="proxy:dltk/javascript/typeinfo/type#RegExp"/>
		</targets>
		</type>
	  </parameters>
      <parameters name="newString">
       <type xsi:type="ref:UnionType" >
      	<targets xsi:type="ref:SimpleType" >
		<target href="proxy:dltk/javascript/typeinfo/type#String"/>
		</targets>
		<targets xsi:type="ref:SimpleType" >
		<target href="proxy:dltk/javascript/typeinfo/type#Function"/>
		</targets>
		</type>
	  </parameters>
    </members>
    <members xsi:type="ref:Method" name="search" directType="Number" description="Searches a string for a specified value.">
      <parameters name="regexp"/>
    </members>
    <members xsi:type="ref:Method" name="slice" directType="String" description="Extracts a part of a string and returns the extracted part in a new string.">
      <parameters name="beginSlice" directType="Number"/>
      <parameters name="endSlice" directType="Number" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="small" directType="String" description="Returns a string in a small font."/>
    <members xsi:type="ref:Method" name="split" description="Splits a string into an array of strings.">
	  <type xsi:type="ref:ArrayType">
        <itemType xsi:type="ref:SimpleType" target="String"/>
      </type>
      <parameters name="separator"/>
      <parameters name="howmany" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="strike" directType="String" description="Returns a string with a strikethrough."/>
    <members xsi:type="ref:Method" name="sub" directType="String" description="Returns a string as subscript."/>
    <members xsi:type="ref:Method" name="substr" directType="String" description="Extracts a specified number of characters in a string, from a start index">
      <parameters name="start"/>
      <parameters name="length" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="substring" directType="String" description="Extracts the characters in a string between two specified indices">
      <parameters name="beginIndex" directType="Number"/>
      <parameters name="endIndex" directType="Number" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="sup" directType="String" description="Returns a string as superscript."/>
    <members xsi:type="ref:Method" name="toLocaleLowerCase" directType="String"/>
    <members xsi:type="ref:Method" name="toLocaleUpperCase" directType="String"/>
    <members xsi:type="ref:Method" name="toLowerCase" directType="String" description="Returns a string in lowercase letters."/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a String value for this object."/>
    <members xsi:type="ref:Method" name="toUpperCase" directType="String" description="Returns a string in uppercase letters."/>
    <members xsi:type="ref:Method" name="valueOf" directType="String" description="Returns the primitive value of a String object."/>
    <members xsi:type="ref:Method" name="trim" directType="String" description="Returns the string stripped of whitespace from both ends."/>
  </ref:Type>
  <ref:TypeAlias source="string" target="String"/>
  <ref:Type name="XML" kind="PREDEFINED">
    <members xsi:type="ref:Property" name="ignoreComments" directType="Boolean" static="true"/>
    <members xsi:type="ref:Property" name="ignoreProcessingInstructions" directType="Boolean" static="true"/>
    <members xsi:type="ref:Property" name="ignoreWhitespace" directType="Boolean" static="true"/>
    <members xsi:type="ref:Property" name="prettyIndent" directType="Number" static="true"/>
    <members xsi:type="ref:Property" name="prettyPrinting" directType="Boolean" static="true"/>
    <members xsi:type="ref:Method" name="defaultSettings" directType="Object" static="true"/>
    <members xsi:type="ref:Method" name="settings" directType="Object" static="true"/>
    <members xsi:type="ref:Method" name="setSettings" static="true"/>
    <members xsi:type="ref:Method" name="addNamespace" directType="XML" description="The addNamespace method adds a namespace declaration to the in scope namespaces for this XML object and returns this XML object.">
      <parameters name="namespace"/>
    </members>
    <members xsi:type="ref:Method" name="appendChild" directType="XML" description="The appendChild method appends the given child to the end of this XML object�s properties and returns this XML object.">
      <parameters name="child"/>
    </members>
    <members xsi:type="ref:Method" name="attribute" directType="XMLList" description="The attribute method returns an XMLList containing zero or one XML attributes associated with this XML object that have the given attributeName. ">
      <parameters name="child"/>
    </members>
    <members xsi:type="ref:Method" name="attributes" directType="XMLList" description="The attributes method returns an XMLList containing the XML attributes of this object."/>
    <members xsi:type="ref:Method" name="child" directType="XMLList" description="The child method returns the list of children in this XML object matching the given propertyName.">
      <parameters name="propertyName"/>
    </members>
    <members xsi:type="ref:Method" name="childIndex" directType="Number" description="The childIndex method returns a Number representing the ordinal position of this XML object within the context of its parent."/>
    <members xsi:type="ref:Method" name="children" directType="XMLList" description="The children method returns an XMLList containing all the properties of this XML object in order"/>
    <members xsi:type="ref:Method" name="comments" directType="XMLList" description="The comments method returns an XMLList containing the properties of this XML object that represent XML comments."/>
    <members xsi:type="ref:Method" name="contains" directType="Boolean" description="The contains method returns the result of comparing this XML object with the given value.">
      <parameters name="value"/>
    </members>
    <members xsi:type="ref:Method" name="copy" directType="XML" description="The copy method returns a deep copy of this XML object with the internal [[Parent]] property set to null."/>
    <members xsi:type="ref:Method" name="descendants" directType="XMLList" description="The descendants method returns all the XML valued descendants (children, grandchildren, great-grandchildren, etc.) of this XML object with the given name. If the name parameter is omitted, it returns all descendants of this XML object.">
      <parameters name="name" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="elements" directType="XMLList" description="When the elements method is called with one parameter name, it returns an XMLList containing all the children of this XML object that are XML elements with the given name. When the elements method is called with no parameters, it returns an XMLList containing all the children of this XML object that are XML elements regardless of their name.">
      <parameters name="name" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="hasComplexContent" directType="Boolean" description="The hasComplexContent method returns a Boolean value indicating whether this XML object contains complex content. An XML object is considered to contain complex content if it represents an XML element that has child elements. XML objects representing attributes, comments, processing instructions and text nodes do not have complex content. The existence of attributes, comments, processing instructions and text nodes within an XML object is not significant in determining if it has complex content."/>
    <members xsi:type="ref:Method" name="hasOwnProperty" directType="Boolean" description="The hasOwnProperty method returns a Boolean value indicating whether this object has the property specified by P. For all XML objects except the XML prototype object, this is the same result returned by the internal method [[HasProperty]]. For the XML prototype object, hasOwnProperty also examines the list of local properties to determine if there is a method property with the given name.">
      <parameters name="prop" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="hasSimpleContent" directType="Boolean" description="The hasSimpleContent method returns a Boolean value indicating whether this XML object contains simple content. An XML object is considered to contain simple content if it represents a text node, represents an attribute node or if it represents an XML element that has no child elements. XML objects representing comments and processing instructions do not have simple content. The existence of attributes, comments, processing instructions and text nodes within an XML object is not significant in determining if it has simple content."/>
    <members xsi:type="ref:Method" name="inScopeNamespaces" directType="Array" description="The inScopeNamespaces method returns an Array of Namespace objects representing the namespaces in scope for this XML object in the context of its parent. If the parent of this XML object is modified, the associated namespace declarations may change. The set of namespaces returned by this method may be a super set of the namespaces used by this value."/>
    <members xsi:type="ref:Method" name="insertChildAfter" directType="XML" description="The insertChildAfter method inserts the given child2 after the given child1 in this XML object and returns this XML object. If child1 is null, the insertChildAfter method inserts child2 before all children of this XML object (i.e., after none of them). If child1 does not exist in this XML object, it returns without modifying this XML object.">
      <parameters name="child1"/>
      <parameters name="child2" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="insertChildBefore" directType="XML" description="The insertChildBefore method inserts the given child2 before the given child1 in this XML object and returns this XML object. If child1 is null, the insertChildBefore method inserts child2 after all children in this XML object (i.e., before none of them). If child1 does not exist in this XML object, it returns without modifying this XML object.">
      <parameters name="child1"/>
      <parameters name="child2" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="length" directType="Number" description="The length method always returns the integer 1 for XML objects. This treatment intentionally blurs the distinction between a single XML object and an XMLList containing only one value"/>
    <members xsi:type="ref:Method" name="localName" directType="String"/>
    <members xsi:type="ref:Method" name="name" directType="QName" description="The name method returns the qualified name (QName) associated with this XML object"/>
    <members xsi:type="ref:Method" name="namespace" directType="Namespace" description="If no prefix is specified, the namespace method returns the Namespace associated with the qualified name of this XML object. If a prefix is specified, the namespace method looks for a namespace in scope for this XML object with the given prefix and, if found, returns it. If no such namespace is found, the namespace method returns undefined">
      <parameters name="prefix" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="namespaceDeclarations" directType="Array" description="The namespaceDeclarations method returns an Array of Namespace objects representing the namespace declarations associated with this XML object in the context of its parent. If the parent of this XML object is modified, the associated namespace declarations may change"/>
    <members xsi:type="ref:Method" name="nodeKind" directType="String" description="he nodeKind method returns a string representing the [[Class]] of this XML object."/>
    <members xsi:type="ref:Method" name="normalize" directType="XML" description="The normalize method puts all text nodes in this and all descendant XML objects into a normal form by merging adjacent text nodes and eliminating empty text nodes. It returns this XML object."/>
    <members xsi:type="ref:Method" name="parent" directType="XML" description="The parent method returns the parent of this XML object."/>
    <members xsi:type="ref:Method" name="prependChild" directType="XML" description="The prependChild method inserts the given child into this object prior to its existing XML properties and returns this XML object.">
      <parameters name="value"/>
    </members>
    <members xsi:type="ref:Method" name="processingInstructions" directType="XMLList" description="When the processingInstructions method is called with one parameter name, it returns an XMLList containing all the children of this XML object that are processing-instructions with the given name. When the processingInstructions method is called with no parameters, it returns an XMLList containing all the children of this XML object that are processing-instructions regardless of their name">
      <parameters name="name" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="propertyIsEnumerable" directType="Boolean" description="The propertyIsEnumerable method returns a Boolean value indicating whether the property P will be included in the set of properties iterated over when this XML object is used in a for-in statement. This method returns truewhen ToString(P) is &quot;0&quot;; otherwise, it returns false. This treatment intentionally blurs the distinction between a single XML object and an XMLList containing only one value">
      <parameters name="property"/>
    </members>
    <members xsi:type="ref:Method" name="removeNamespace" directType="XML" description="The removeNamespace method removes the given namespace from the in scope namespaces of this object and all its descendents, then returns a copy of this XML object. The removeNamespaces method will not remove a namespace from an object where it is referenced by that object�s QName or the QNames of that object�s attributes">
      <parameters name="namespace"/>
    </members>
    <members xsi:type="ref:Method" name="replace" directType="XML" description="The replace method replaces the XML properties of this XML object specified by propertyName with value and returns this XML object. If this XML object contains no properties that match propertyName, the replace method returns without modifying this XML object. The propertyName parameter may be a numeric property name, an unqualified name for a set of XML elements, a qualified name for a set of XML elements or the properties wildcard &quot;*&quot;. When the propertyName parameter is an unqualified name, it identifies XML elements in the default namespace. The value parameter may be an XML object, XMLList object or any value that may be converted to a String with ToString(). ">
      <parameters name="propertyName"/>
      <parameters name="value" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="setChildren" directType="XML" description="The setChildren method replaces the XML properties of this XML object with a new set of XML properties from value. value may be a single XML object or an XMLList. setChildren returns this XML object.">
      <parameters name="value"/>
    </members>
    <members xsi:type="ref:Method" name="setLocalName" directType="XML" description="The setLocalName method replaces the local name of this XML object with a string constructed from the givenname">
      <parameters name="name"/>
    </members>
    <members xsi:type="ref:Method" name="setName" directType="XML" description="The setName method replaces the name of this XML object with a QName or AttributeName constructed from the given name">
      <parameters name="name"/>
    </members>
    <members xsi:type="ref:Method" name="setNamespace" directType="XML" description="The setNamespace method replaces the namespace associated with the name of this XML object with the given namespace">
      <parameters name="ns"/>
    </members>
    <members xsi:type="ref:Method" name="text" directType="String" description="The text() method represents the source code of an object."/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a String value for this object."/>
    <members xsi:type="ref:Method" name="toXMLString" directType="String" description="Returns a String value for this object."/>
    <members xsi:type="ref:Method" name="valueOf" directType="XML" description="The valueOf method returns this XML object"/>
  </ref:Type>
  <ref:Type name="XMLList" kind="PREDEFINED">
      <members xsi:type="ref:Method" name="attribute" directType="XMLList" description="The attribute method returns an XMLList containing zero or one XML attributes associated with this XML object that have the given attributeName. ">
      <parameters name="child"/>
    </members>
    <members xsi:type="ref:Method" name="attributes" directType="XMLList" description="The attributes method returns an XMLList containing the XML attributes of this object."/>
    <members xsi:type="ref:Method" name="child" directType="XML" description="The child method returns the list of children in this XML object matching the given propertyName.">
      <parameters name="propertyName"/>
    </members>
    <members xsi:type="ref:Method" name="children" directType="XML" description="The children method returns an XMLList containing all the properties of this XML object in order"/>
  	<members xsi:type="ref:Method" name="comments" directType="XMLList" description="The comments method returns an XMLList containing the properties of this XML object that represent XML comments."/>
    <members xsi:type="ref:Method" name="copy" directType="XML" description="The copy method returns a deep copy of this XML object with the internal [[Parent]] property set to null."/>
    <members xsi:type="ref:Method" name="descendants" directType="XMLList" description="The descendants method returns all the XML valued descendants (children, grandchildren, great-grandchildren, etc.) of this XML object with the given name. If the name parameter is omitted, it returns all descendants of this XML object.">
      <parameters name="name" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="elements" directType="XMLList" description="When the elements method is called with one parameter name, it returns an XMLList containing all the children of this XML object that are XML elements with the given name. When the elements method is called with no parameters, it returns an XMLList containing all the children of this XML object that are XML elements regardless of their name.">
      <parameters name="name" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="hasComplexContent" directType="Boolean" description="The hasComplexContent method returns a Boolean value indicating whether this XML object contains complex content. An XML object is considered to contain complex content if it represents an XML element that has child elements. XML objects representing attributes, comments, processing instructions and text nodes do not have complex content. The existence of attributes, comments, processing instructions and text nodes within an XML object is not significant in determining if it has complex content."/>
    <members xsi:type="ref:Method" name="hasOwnProperty" directType="Boolean" description="The hasOwnProperty method returns a Boolean value indicating whether this object has the property specified by P. For all XML objects except the XML prototype object, this is the same result returned by the internal method [[HasProperty]]. For the XML prototype object, hasOwnProperty also examines the list of local properties to determine if there is a method property with the given name.">
      <parameters name="prop" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="hasSimpleContent" directType="Boolean" description="The hasSimpleContent method returns a Boolean value indicating whether this XML object contains simple content. An XML object is considered to contain simple content if it represents a text node, represents an attribute node or if it represents an XML element that has no child elements. XML objects representing comments and processing instructions do not have simple content. The existence of attributes, comments, processing instructions and text nodes within an XML object is not significant in determining if it has simple content."/>
    <members xsi:type="ref:Method" name="length" directType="Number" description="The length method always returns the integer 1 for XML objects. This treatment intentionally blurs the distinction between a single XML object and an XMLList containing only one value"/>
    <members xsi:type="ref:Method" name="normalize" directType="XMLList" description="The normalize method puts all text nodes in this and all descendant XMLList objects into a normal form by merging adjacent text nodes and eliminating empty text nodes. It returns this XML object."/>
    <members xsi:type="ref:Method" name="parent" directType="XML" description="The parent method returns the parent of this XML object."/>
    <members xsi:type="ref:Method" name="processingInstructions" directType="XMLList" description="When the processingInstructions method is called with one parameter name, it returns an XMLList containing all the children of this XML object that are processing-instructions with the given name. When the processingInstructions method is called with no parameters, it returns an XMLList containing all the children of this XML object that are processing-instructions regardless of their name">
      <parameters name="name" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="propertyIsEnumerable" directType="Boolean" description="The propertyIsEnumerable method returns a Boolean value indicating whether the property P will be included in the set of properties iterated over when this XML object is used in a for-in statement. This method returns truewhen ToString(P) is &quot;0&quot;; otherwise, it returns false. This treatment intentionally blurs the distinction between a single XML object and an XMLList containing only one value">
      <parameters name="property"/>
    </members>
    <members xsi:type="ref:Method" name="text" directType="String" description="The text() method represents the source code of an object."/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a String value for this object."/>
    <members xsi:type="ref:Method" name="toXMLString" directType="String" description="Returns a String value for this object."/>
    <members xsi:type="ref:Method" name="valueOf" directType="XMLList" description="The valueOf method returns this XMLList object"/>
 </ref:Type>
 <ref:Type name="Namespace" kind="PREDEFINED">
 	<members xsi:type="ref:Property" name="prefix" directType="String" description="The prefix of the namespace."/>
 	<members xsi:type="ref:Property" name="uri" directType="String" description="The Uniform Resource Identifier (URI) of the namespace."/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a String value for this object."/>
    <members xsi:type="ref:Method" name="valueOf" directType="XMLList" description="Returns the URI value of the specified object."/>
 </ref:Type>
 <ref:Type name="QName" kind="PREDEFINED">
 	<members xsi:type="ref:Property" name="localName" directType="String" description="The local name of the QName object."/>
 	<members xsi:type="ref:Property" name="uri" directType="String" description="The Uniform Resource Identifier (URI) of the QName object."/>
    <members xsi:type="ref:Method" name="toString" directType="String" description="Returns a String value for this object."/>
    <members xsi:type="ref:Method" name="valueOf" directType="XMLList" description="The valueOf method returns this QName object"/>
 </ref:Type>
 <ref:Type name="JSON" kind="PREDEFINED">
    <members xsi:type="ref:Method" name="parse" directType="Object" description="Parse a string as JSON, optionally transforming the value produced by parsing." static="true">
      <parameters name="text" directType="String"/>
      <parameters name="reviver" kind="OPTIONAL"/>
    </members>
    <members xsi:type="ref:Method" name="stringify" directType="String" description="Convert a value to JSON, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified. The optional space causes the resulting string to be pretty-printed." static="true">
      <parameters name="value"/>
      <parameters name="replacer" kind="OPTIONAL"/>
      <parameters name="space" kind="OPTIONAL"/>
    </members>
 </ref:Type>
 	<ref:TypeLiteral target="Error"/>
	<ref:TypeLiteral target="EvalError"/>
	<ref:TypeLiteral target="RangeError"/>
	<ref:TypeLiteral target="ReferenceError"/>
	<ref:TypeLiteral target="SyntaxError"/>
	<ref:TypeLiteral target="TypeError"/>
	<ref:TypeLiteral target="URIError"/>
	<ref:TypeLiteral target="Function"/>
	<ref:TypeLiteral target="Object"/>
	<ref:TypeLiteral target="RegExp"/>
	<ref:TypeLiteral target="Math"/>
	<ref:TypeLiteral target="Boolean"/>
	<ref:TypeLiteral target="Date"/>
	<ref:TypeLiteral target="Number"/>
	<ref:TypeLiteral target="String"/>
	<ref:TypeLiteral target="Array"/>
	<ref:TypeLiteral target="XML"/>
	<ref:TypeLiteral target="XMLList"/>
	<ref:TypeLiteral target="Namespace"/>
	<ref:TypeLiteral target="QName"/>
	<ref:TypeLiteral target="JSON"/>
</xmi:XMI>
